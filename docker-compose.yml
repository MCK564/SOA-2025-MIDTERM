version: '3.8'

services:
  mysql:
    image: mysql:8.0.28
    restart: always
    ports:
      - 3307:3306
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_DATABASE: bank
      MYSQL_USER: mck0506
      MYSQL_PASSWORD: 123456
      MYSQL_HOST: mysql
    volumes:
      - D:/Docker/volume/mysql_28:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-p123456"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin:latest
    restart: always
    ports:
      - 9000:80
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: root
      MYSQL_PASSWORD: 123456
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - D:/Docker/volume/redis_data:/data
    command: [ "redis-server", "--appendonly", "yes" ,"--notify-keyspace-events", "Ex" ]
    networks:
      - app-network

#  zookeeper:
#    image: bitnami/zookeeper:3.8
#    container_name: zookeeper
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#    ports:
#      - "2181:2181"
#    networks:
#      - app-network

  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      CLUSTER_ID: 5L6g3nQJRjaYqerqfv4n3w
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - D:/Docker/volume/kafka-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "/opt/kafka/bin/kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 10s
      timeout: 10s
      retries: 20
    networks: [ app-network ]




  user-service:
    build: ./user_service
    container_name: user-service
    ports:
      - "8006:8000"
    env_file:
      - ./user_service/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./user_service:/app

  product-service:
    build: ./product_service
    container_name: product-service
    ports:
      - "8005:8005"
    env_file:
      - ./product_service/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./product_service:/app

  payment-service:
    build: ./payment_service
    container_name: payment-service
    ports:
      - "8004:8004"
    env_file:
      - ./payment_service/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./payment_service:/app



  notification-service:
    build: ./notification_service
    container_name: notification-service
    ports:
      - "8003:8003"
    env_file:
      - ./notification_service/.env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_healthy

    networks:
      - app-network
    volumes:
      - ./notification_service:/app
    command: ["/app/start.sh"]


  auth-service:
    build: ./auth_service
    container_name: auth-service
    ports:
      - "8002:8000"
    env_file:
      - ./auth_service/.env
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - ./auth_service:/app

  api-gateway:
    build: ./api_gateway
    container_name: api-gateway
    ports:
      - "8001:8001"
    env_file:
      - ./api_gateway/.env
    depends_on:
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      payment-service:
        condition: service_started
      notification-service:
        condition: service_started
      auth-service:
        condition: service_started
    networks:
      - app-network
    volumes:
      - ./api_gateway:/app



networks:
  app-network:
      driver: bridge

